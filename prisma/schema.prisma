generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model profiles {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(80)
  description  String?        @db.VarChar(150)
  isSupervisor Boolean
  isClient     Boolean
  isAdmin      Boolean
  isSysAdmin   Boolean
  createdAt    DateTime       @default(now()) @db.Date
  createdBy    Int
  userProfiles userProfiles[]
}

model users {
  id               Int       @id @default(autoincrement())
  identificationId String    @db.VarChar(80)
  password         String    @db.VarChar(300)
  isVerified       Boolean
  activationCode   String    @db.VarChar(10)
  activationDate   DateTime  @default(now()) @db.Timestamp(0)
  salt             String    @db.VarChar(300)
  createdAt        DateTime  @default(now()) @db.Date
  createdBy        Int?
  modifiedAt       DateTime? @db.Date
  modifiedBy       Int?
  isDeleted        Boolean?
}

model clients {
  id              Int               @id @unique(map: "id") @default(autoincrement())
  identification  String            @unique(map: "client_identification") @db.VarChar(80)
  name            String            @db.VarChar(200)
  email           String            @db.VarChar(150)
  address         String            @db.VarChar(150)
  phone           String            @db.VarChar(80)
  cellphone       String            @db.VarChar(80)
  imageUrl        String?           @db.VarChar(500)
  isActive        Boolean
  createdAt       DateTime          @default(now()) @db.Date
  createdBy       Int
  modifiedAt      DateTime?         @db.Date
  modifiedBy      Int?
  clientsRequests clientsRequests[]
  reports         reports[]
}

model employees {
  id               Int                @id @unique(map: "id") @default(autoincrement())
  identification   String             @unique(map: "employee_identification") @db.VarChar(80)
  firstName        String             @db.VarChar(150)
  lastName         String             @db.VarChar(150)
  email            String             @db.VarChar(150)
  address          String             @db.VarChar(150)
  phone            String             @db.VarChar(150)
  cellphone        String             @db.VarChar(80)
  isActive         Boolean
  imageUrl         String?            @db.VarChar(500)
  createdAt        DateTime           @default(now()) @db.Date
  createdBy        Int
  modifiedAt       DateTime?          @db.Date
  modifiedBy       Int?
  employeeRequests employeeRequests[]
  reportComments   reportComments[]
  reports          reports[]
}

model company {
  id             Int      @id @default(autoincrement())
  identification String   @unique(map: "company_identification") @db.VarChar(80)
  name           String   @db.VarChar(150)
  address        String   @db.VarChar(150)
  phone          String?  @db.VarChar(80)
  cellphone      String?  @db.VarChar(80)
  imageUrl       String?  @db.VarChar(500)
  createdBy      Int
  createdAt      DateTime @default(now()) @db.Date
  isActive       Boolean
}

model clientRequestResponses {
  id         Int       @id @default(autoincrement())
  requestId  Int
  comments   String    @db.Text
  createdAt  DateTime  @default(now()) @db.Date
  createdBy  Int
  modifiedBy Int?
  modifiedAt DateTime? @db.Date
  isDeleted  Boolean
}

model clientsRequests {
  id                 Int                @id @default(autoincrement())
  identification     String             @db.VarChar(100)
  isClosed           Boolean
  request            String             @db.Text
  requestTypeId      Int
  createdAt          DateTime           @default(now()) @db.Date
  createdBy          Int
  modifiedAt         DateTime?          @db.Date
  modifiedBy         Int?
  isDeleted          Boolean
  clients            clients            @relation(fields: [identification], references: [identification], onUpdate: Restrict, map: "fk_cli_clients")
  clientRequestTypes clientRequestTypes @relation(fields: [requestTypeId], references: [id], onUpdate: Restrict, map: "fk_cli_request_type")

  @@index([identification], map: "fk_cli_clients")
  @@index([requestTypeId], map: "fk_cli_request_type")
}

model documentTypes {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(150)
  isActive Boolean
}

model employeeRequestComments {
  id         Int       @id @default(autoincrement())
  idRequest  Int
  comments   String    @db.Text
  createdAt  DateTime  @default(now()) @db.Date
  createdBy  Int
  modifiedBy Int?
  modifiedAt DateTime? @db.Date
}

model employeeRequests {
  id                   Int                  @id @default(autoincrement())
  identification       String               @db.VarChar(100)
  requestTypeId        Int
  createdAt            DateTime             @default(now()) @db.Timestamp(0)
  isClosed             Boolean
  observations         String?              @db.Text
  modifiedAt           DateTime?            @db.Date
  modifiedBy           Int?
  employees            employees            @relation(fields: [identification], references: [identification], onUpdate: Restrict, map: "fk_emp_employees")
  employeeRequestTypes employeeRequestTypes @relation(fields: [requestTypeId], references: [id], onUpdate: Restrict, map: "fk_emp_request_type")

  @@index([requestTypeId], map: "fk_emp_request_type")
  @@index([identification], map: "fk_emp_employees")
}

model reportCommentPhotos {
  id              Int      @id @default(autoincrement())
  reportCommentId Int
  imageUrl        String   @db.VarChar(500)
  createdAt       DateTime @default(now()) @db.Date
  createdBy       Int
  modifiedBy      Int?
  modifiedAt      Int?
  isDeleted       Boolean
}

model reportComments {
  id         Int       @id @default(autoincrement())
  reportId   Int
  employeeId String    @db.VarChar(20)
  comments   String    @db.Text
  createdBy  Int
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  isDeleted  Boolean   @default(false)
  modifiedBy Int?
  modifiedAt DateTime? @db.Timestamp(0)
  employees  employees @relation(fields: [employeeId], references: [identification], onUpdate: Restrict, map: "fk_comm_employee")

  @@index([employeeId], map: "fk_comments_employee")
}

model reportPhotos {
  id         Int       @id @default(autoincrement())
  reportId   Int
  publicId   String    @db.VarChar(200)
  url        String    @db.VarChar(500)
  secureUrl  String    @db.VarChar(500)
  imageUrl   String    @db.VarChar(500)
  isDeleted  Boolean
  createdAt  DateTime  @default(now()) @db.Date
  createdBy  Int
  modifiedAt DateTime? @db.Date
  modifiedBy Int?
  reports    reports   @relation(fields: [reportId], references: [id], onUpdate: Restrict, map: "fk_reportPhotos_reportId")

  @@index([reportId], map: "fk_reportPhotos_reportId")
}

model reports {
  id           Int            @id @default(autoincrement())
  clientId     Int
  laborAreaId  Int
  news         String?        @db.VarChar(150)
  report       String         @db.Text
  employeeId   Int
  isDeleted    Boolean
  createdBy    Int
  createdAt    DateTime       @default(now()) @db.Timestamp(0)
  modifiedAt   DateTime?      @db.Date
  modifiedBy   Int?
  reportPhotos reportPhotos[]
  clients      clients        @relation(fields: [clientId], references: [id], onUpdate: Restrict, map: "fk_reports_client")
  employees    employees      @relation(fields: [employeeId], references: [id], onUpdate: Restrict, map: "fk_reports_employees")
  laborAreas   laborAreas     @relation(fields: [laborAreaId], references: [id], onUpdate: Restrict, map: "fk_reports_labor_area")

  @@index([laborAreaId], map: "fk_reports_labor_area")
  @@index([clientId], map: "fk_reports_client")
  @@index([employeeId], map: "fk_reports_employees")
}

model userProfiles {
  id         Int       @id @default(autoincrement())
  userId     Int
  profileId  Int
  isDeleted  Boolean
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  createdBy  Int
  modifiedAt DateTime? @db.Timestamp(0)
  modifiedBy Int?
  profiles   profiles  @relation(fields: [profileId], references: [id], onUpdate: Restrict, map: "fk_userProfile_profiles")

  @@index([profileId], map: "fk_userProfile_profiles")
}

model clientEmployees {
  id         Int       @id @default(autoincrement())
  clientId   Int
  createdAt  DateTime? @default(now()) @db.Date
  createdBy  Int
  employeeId Int
  isActive   Boolean
  modifiedAt DateTime? @db.Date
  modifiedBy Int?
}

model laborAreas {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(150)
  isActive Boolean
  reports  reports[]
}

model recoveryCodes {
  id             Int      @id @default(autoincrement())
  identification String   @db.VarChar(80)
  email          String   @db.VarChar(200)
  code           String   @db.VarChar(10)
  createdAt      DateTime @default(now()) @db.Timestamp(0)
  isVerified     Boolean
}

model employeeRequestTypes {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(150)
  description      String?            @db.VarChar(500)
  isActive         Boolean
  employeeRequests employeeRequests[]
}

model clientRequestTypes {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(150)
  description     String            @db.VarChar(500)
  isActive        Boolean
  clientsRequests clientsRequests[]
}

model notifications {
  id             Int      @id @default(autoincrement())
  identification String   @db.VarChar(80)
  title          String   @db.VarChar(80)
  message        String   @db.VarChar(150)
  createdAt      DateTime @default(now()) @db.Timestamp(0)
  isRead         Boolean
  objectId       Int
  screen         String   @db.VarChar(100)
}
